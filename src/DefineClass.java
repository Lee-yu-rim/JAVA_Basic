
public class DefineClass {
	//객체지향 프로그래밍 : oop(Object Oriented Programing) 
	//특징
	//1. 상속
	//2. 다형성
	//3. 캡슐화(정보은닉)
	
	//작성형태(구성요소)
//	#속성(멤버변수 - 자동초기화)  : 자동초기화 - 명시적초기화 - 초기화 블럭 - 생성자(초기화의 우선순위)
//	            * 인스턴스  변수
//		            - 객체 생성을 통해 사용 가능하다.
//		            - 생성자에 의해 초기화 된다.
//	            * 클래스(static) 변수 
//	                - 객체 생성 유무와 상관 없이 사용 가능하다.
//	                - 필요에 따라서 직접 초기화한다.
//	                - 객체에서 공유 된다.
	
//	#초기화 블럭              
//	            * 인스턴스 초기화 블럭 : 인스턴스 변수를 초기화한다.
//	            * 클래스(static) 초기화 블럭 : 클래스 변수를 초기화한다.
	
//	#생성자
//         		- 기본생성자는 모든 클래스에 존재한다.(생략이 가능하다.)	
//				- 인스턴스변수를 초기화 한다.
//				- 클래스 이름과 동일하다.
//				- 매개변수를 정의할 수 있다.
//				- 오버로딩이 가능하다.(oop의 다형성을 구현)
//				- 객체 생성시 한 번만 호출(사용)되어진다.
//				- 생성자간 호출이 가능하다.(this()함수 사용)
//				- 멤버변수와 매개변수를 구분하기 위해 this속성을 사용한다.
	
//	#기능(메소드)
//				* 인스턴스 메소드
//					- 객체를 생성해야 사용 가능하다.
//					- 인스턴스 변수와 클래스 변수가 모두 사용 가능하다.
//				* 클래스(static) 메소드
//					- 객체 생성 유무와 상관없이 사용 가능하다.
//					- 클래스 변수만 사용 가능하다.
	
	
	//사용 예시
//	int iv;        					//인스턴스 변수
//	static int cv;  				//클래스(static) 변수
//	
//	{               				//인스턴스 초기화 블럭 => 인스턴스 변수를 초기화
//		iv = 10;
//	}
//	
//	static {        				//클래스(static) 초기화 블럭 => 클래스 변수를 초기화
//		cv = 20;
//	}
//	
//	DefineClass(){  				//(기본)생성자
// 		
//	}
//	
//	DefineClass(int iv){			//생성자의 오버로딩
//		this.iv = 30;
//	}
//	
//	void instanceMethod() {			//인스턴스 메소드 => 인스턴스/클래스 변수 모두 사용가능
//		iv = 50;
//		cv = 60;
//	}
//	
//	void instanceMethod(int x) {	//메소드 오버로딩
//		iv = 50;
//		cv = 60;
//  }
//	
//	static void staticMethod() {	//클래스(static) 메소드 => 클래스 변수만 사용 가능
//		cv = 70;
//	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
